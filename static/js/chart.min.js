// Chart.js Minimal - Lightweight charting library for Shiksha Leap
// This is a simplified version for development. In production, use the full Chart.js library.

window.Chart = class Chart {
  constructor(ctx, config) {
    this.ctx = ctx;
    this.config = config;
    this.canvas = ctx.canvas;
    this.data = config.data;
    this.options = config.options || {};
    
    this.render();
  }
  
  render() {
    const canvas = this.canvas;
    const ctx = this.ctx;
    const width = canvas.width;
    const height = canvas.height;
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Set default styles
    ctx.fillStyle = '#374151';
    ctx.strokeStyle = '#6b7280';
    ctx.lineWidth = 2;
    ctx.font = '12px Arial';
    
    switch (this.config.type) {
      case 'bar':
        this.renderBarChart();
        break;
      case 'line':
        this.renderLineChart();
        break;
      case 'doughnut':
      case 'pie':
        this.renderDoughnutChart();
        break;
      default:
        this.renderBarChart();
    }
  }
  
  renderBarChart() {
    const ctx = this.ctx;
    const canvas = this.canvas;
    const data = this.data;
    
    if (!data.datasets || !data.datasets[0] || !data.datasets[0].data) return;
    
    const values = data.datasets[0].data;
    const labels = data.labels || [];
    const colors = data.datasets[0].backgroundColor || ['#3b82f6', '#10b981', '#f59e0b', '#ef4444'];
    
    const padding = 40;
    const chartWidth = canvas.width - padding * 2;
    const chartHeight = canvas.height - padding * 2;
    
    const maxValue = Math.max(...values);
    const barWidth = chartWidth / values.length * 0.8;
    const barSpacing = chartWidth / values.length * 0.2;
    
    // Draw bars
    values.forEach((value, index) => {
      const barHeight = (value / maxValue) * chartHeight;
      const x = padding + index * (barWidth + barSpacing) + barSpacing / 2;
      const y = canvas.height - padding - barHeight;
      
      // Set color
      ctx.fillStyle = Array.isArray(colors) ? colors[index % colors.length] : colors;
      
      // Draw bar
      ctx.fillRect(x, y, barWidth, barHeight);
      
      // Draw value label
      ctx.fillStyle = '#374151';
      ctx.textAlign = 'center';
      ctx.fillText(value.toString(), x + barWidth / 2, y - 5);
      
      // Draw x-axis label
      if (labels[index]) {
        ctx.fillText(labels[index], x + barWidth / 2, canvas.height - padding + 20);
      }
    });
    
    // Draw axes
    ctx.strokeStyle = '#6b7280';
    ctx.beginPath();
    // Y-axis
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, canvas.height - padding);
    // X-axis
    ctx.moveTo(padding, canvas.height - padding);
    ctx.lineTo(canvas.width - padding, canvas.height - padding);
    ctx.stroke();
  }
  
  renderLineChart() {
    const ctx = this.ctx;
    const canvas = this.canvas;
    const data = this.data;
    
    if (!data.datasets || !data.datasets[0] || !data.datasets[0].data) return;
    
    const values = data.datasets[0].data;
    const labels = data.labels || [];
    const color = data.datasets[0].borderColor || '#3b82f6';
    
    const padding = 40;
    const chartWidth = canvas.width - padding * 2;
    const chartHeight = canvas.height - padding * 2;
    
    const maxValue = Math.max(...values);
    const minValue = Math.min(...values);
    const valueRange = maxValue - minValue || 1;
    
    // Draw line
    ctx.strokeStyle = color;
    ctx.lineWidth = 3;
    ctx.beginPath();
    
    values.forEach((value, index) => {
      const x = padding + (index / (values.length - 1)) * chartWidth;
      const y = canvas.height - padding - ((value - minValue) / valueRange) * chartHeight;
      
      if (index === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    });
    
    ctx.stroke();
    
    // Draw points
    ctx.fillStyle = color;
    values.forEach((value, index) => {
      const x = padding + (index / (values.length - 1)) * chartWidth;
      const y = canvas.height - padding - ((value - minValue) / valueRange) * chartHeight;
      
      ctx.beginPath();
      ctx.arc(x, y, 4, 0, 2 * Math.PI);
      ctx.fill();
      
      // Draw labels
      if (labels[index]) {
        ctx.fillStyle = '#374151';
        ctx.textAlign = 'center';
        ctx.fillText(labels[index], x, canvas.height - padding + 20);
      }
    });
    
    // Draw axes
    ctx.strokeStyle = '#6b7280';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, canvas.height - padding);
    ctx.moveTo(padding, canvas.height - padding);
    ctx.lineTo(canvas.width - padding, canvas.height - padding);
    ctx.stroke();
  }
  
  renderDoughnutChart() {
    const ctx = this.ctx;
    const canvas = this.canvas;
    const data = this.data;
    
    if (!data.datasets || !data.datasets[0] || !data.datasets[0].data) return;
    
    const values = data.datasets[0].data;
    const labels = data.labels || [];
    const colors = data.datasets[0].backgroundColor || ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];
    
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const radius = Math.min(centerX, centerY) - 20;
    const innerRadius = radius * 0.6; // For doughnut effect
    
    const total = values.reduce((sum, value) => sum + value, 0);
    let currentAngle = -Math.PI / 2; // Start from top
    
    // Draw segments
    values.forEach((value, index) => {
      const sliceAngle = (value / total) * 2 * Math.PI;
      const color = Array.isArray(colors) ? colors[index % colors.length] : colors;
      
      // Draw slice
      ctx.fillStyle = color;
      ctx.beginPath();
      ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
      ctx.arc(centerX, centerY, innerRadius, currentAngle + sliceAngle, currentAngle, true);
      ctx.closePath();
      ctx.fill();
      
      // Draw label
      const labelAngle = currentAngle + sliceAngle / 2;
      const labelRadius = radius + 15;
      const labelX = centerX + Math.cos(labelAngle) * labelRadius;
      const labelY = centerY + Math.sin(labelAngle) * labelRadius;
      
      ctx.fillStyle = '#374151';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      
      if (labels[index]) {
        ctx.fillText(labels[index], labelX, labelY);
      }
      
      currentAngle += sliceAngle;
    });
  }
  
  update() {
    this.render();
  }
  
  destroy() {
    // Clean up
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
  }
};

// Chart.js plugins and utilities
Chart.defaults = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    legend: {
      display: true,
      position: 'top'
    }
  }
};

// Helper function to create responsive charts
Chart.createResponsiveChart = function(canvasId, config) {
  const canvas = document.getElementById(canvasId);
  if (!canvas) {
    console.error('Canvas element not found:', canvasId);
    return null;
  }
  
  // Set canvas size based on container
  const container = canvas.parentElement;
  canvas.width = container.clientWidth;
  canvas.height = container.clientHeight || 300;
  
  const ctx = canvas.getContext('2d');
  return new Chart(ctx, config);
};

// Export for global use
window.Chart = Chart;